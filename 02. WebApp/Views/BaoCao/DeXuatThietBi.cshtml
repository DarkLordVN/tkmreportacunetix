@using PagedList.Mvc;
@using TKM.DAO.EntityFramework

@model TKM.BLL.BaoCaoTongHopListView
@{
    ViewBag.Title = "Báo cáo đề xuất thiết bị";
    //var lstChucVu = (List<TKM.BLL.DmChucVuViewModel>)ViewBag.lstChucVu;
}
@section Css {
    <style></style>
}
<div class="row">
    <div class="col right-content">
        <div class="row">
            <div class="col">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb bg-transparent mb-0 fwb">
                        <li class="breadcrumb-item"><a href="/Home"><i class="fas fa-home"></i></a></li>
                        <li class="breadcrumb-item"><a href="/BaoCao/Index">@ViewBag.Title</a></li>
                    </ol>
                </nav>
            </div>
        </div>
        @if (TempData["AlertData"] != null)
            {
            <div class="alert @TempData["AlertType"]">
                <button type="button" class="close" data-dismiss="alert">x</button>
                <strong>@Html.Raw(TempData["AlertData"])</strong>
                <a id="lblMessage"></a>
            </div>
        }
        <div class="row">
            <div class="col">
                <!-- Classic tabs -->
                <div class="classic-tabs tabs-f-cl mx-2">
                    <div class="tab-content py-0 card" id="myClassicTabContentShadow">
                        <div class="tab-pane fade active show" id="vb-lt-den" role="tabpanel" aria-labelledby="profile-tab-classic-shadow">
                            <div class="row lighten-4 p-3">
                                <table class="table dataTable no-footer table-bordered">
                                    <tr>
                                        <td width="45%" align="center" class="d-grid m-0 p-0 align-top">
                                            <div class="modal-header light-blue darken-3 white-text p-2">
                                                <h6 class="title"><i class="fas fa-pencil-alt"></i> Báo cáo</h6>
                                            </div>
                                            <select class="d-block border-0 overflow-auto" multiple id="leftProcess" size="8" style="width: 100%; outline: none;">
                                                <option value="cpuhnhost" class="p-3" style="border: 1px solid #dee2e6;">CPU thiết bị</option>
                                                <option value="ramhnhost" class="p-3" style="border: 1px solid #dee2e6;">RAM thiết bị</option>
                                                <option value="hddhnhost" class="p-3" style="border: 1px solid #dee2e6;">Ổ cứng thiết bị</option>
                                                <option value="bwihnhost" class="p-3" style="border: 1px solid #dee2e6;">Băng thông vào</option>
                                                <option value="bwohnhost" class="p-3" style="border: 1px solid #dee2e6;">Băng thông ra</option>
                                            </select>
                                        </td>
                                        <td width="10%">
                                            <button class="btn text-white f-bg1 waves-effect waves-light" onclick="moveRight('leftProcess','rightProcess', true);">>></button>
                                            <br />
                                            @*<button class="btn text-white f-bg3 waves-effect waves-light" onclick="moveRight('leftProcess','rightProcess', false);">></button>
                                            <br />
                                            <button class="btn text-white f-bg3 waves-effect waves-light" onclick="moveRight('rightProcess','leftProcess', false)">
                                                <
                                            </button>
                                            <br />*@
                                            <button class="btn text-white f-bg1 waves-effect waves-light" onclick="moveRight('rightProcess','leftProcess', true)">
                                                <<
                                            </button>
                                            @*<button onclick="submitTest()">Test</button>*@
                                        </td>
                                        <td width="45%" align="center" class="d-grid m-0 p-0 align-top">
                                            <div class="modal-header light-blue darken-3 white-text p-2">
                                                <h6 class="title"><i class="fas fa-pencil-alt"></i> Báo cáo được chọn</h6>
                                            </div>
                                            <select class="d-block border-0 overflow-auto" multiple id="rightProcess" size="8" style="width: 100%;  outline: none;"></select>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="row lighten-4">
                                <div class="col p-3">
                                    <div class="form-group row mb-0">
                                        <label for="TrangThai" class="col-sm-2 col-form-label">Nhóm thiết bị</label>
                                        <div class="col-sm-4">
                                            <select class="mdb-select md-form md-outline colorful-select dropdown-primary m-0 p-0" multiple id="ddlGroupName" searchable="Nhập từ khóa..">
                                                @{
                                                    <option value="" disabled>--- Tất cả ---</option>
                                                    if (Model.LstGroupData != null && Model.LstGroupData.Count > 0)
                                                    {
                                                        foreach (var item in Model.LstGroupData)
                                                        {
                                                            <option value="@item.Value">@item.Text</option>
                                                        }
                                                    }
                                                }
                                            </select>
                                        </div>
                                        <label for="txtTenThietBi" class="col-sm-2 col-form-label" style="padding-left:33px">Tên thiết bị</label>
                                        <div class="col-sm-4">
                                            @Html.TextBoxFor(model => model.TenThietBi, new { @class = "form-control keyenter", @id = "txtTenThietBi" })
                                        </div>
                                    </div>

                                    <div class="form-group row rbtDay">
                                        <label for="txtTuNgay" class="col-lg-2 col-form-label">Từ ngày</label>
                                        <div class="col-lg-4">
                                            <div class="form-group">
                                                <div class="input-group date datepicker">
                                                    @Html.TextBoxFor(model => model.TuNgay, new { @class = "form-control keyenter", @id = "txtTuNgay" })
                                                    <span class="input-group-addon">
                                                        <span class="fa fa-clock"></span>
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                        <label for="txtDenNgay" class="col-lg-2 col-form-label" style="padding-left:33px">Đến ngày</label>
                                        <div class="col-lg-4">
                                            <div class="form-group">
                                                <div class="input-group date datepicker">
                                                    @Html.TextBoxFor(model => model.DenNgay, new { @class = "form-control keyenter", @id = "txtDenNgay" })
                                                    <span class="input-group-addon">
                                                        <span class="fa fa-clock"></span>
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col text-center text-lg-right">
                                        <button id="btnExportWord" onclick="exportWord()" class="btn btn-primary" type="button"><i class="fal fa-file-word"> </i>  Xuất Word</button>
                                        <button id="btnExportPDF" onclick="exportPDF()" class="btn btn-warning" type="button"><i class="fal fa-file-word"> </i>  Xuất PDF</button>
                                    </div>
                                    <!-- / Collapsible element -->
                                </div>
                            </div>
                            <hr class="my-1">

                            <div class="row mt-3 mb-3 chartflag" style="display: none;">
                                <div class="col-12">
                                    <div class="table-responsive-sm">
                                        <div class="card card-cascade narrower">
                                            <!-- Card image -->
                                            <!-- Card content -->
                                            <div class="card-body card-body-cascade text-center">
                                                <div id="chart1"></div>
                                                <div id="chart"></div>
                                            </div>
                                            <!-- Card content -->

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="txtChuaXuLy" value="@Model.TongThietBiLoi" />
<input type="hidden" id="txtDaXuLy" value="@Model.TongThietBi" />
<input type="hidden" id="txtGroupName" value="@Model.LstGroup" />

@section Script {
    <script>
        $("#leftProcess").dblclick(function () {
            moveRight('leftProcess', 'rightProcess', false);
        });
        $("#rightProcess").dblclick(function () {
            moveRight('rightProcess', 'leftProcess', false);
        });
        function moveRight(leftValue, rightValue, getAll) {
            //alert("Elft value is t : "+leftValue);
            var leftSelect = $("#" + leftValue + "");
            var rightSelect = $("#" + rightValue + "");
            //alert("test : " + document.forms["form1"].elements[myLeftId].options[selItem].value);
            if (leftSelect.selectedIndex == -1) {

            } else {
                if (getAll) {
                    var option = $("#" + leftValue + " option");
                    rightSelect.append(option);
                }
                else {
                    var option = leftSelect.find(":selected");
                    rightSelect.append(option);
                }
            }
        }

        function submitTest() {
            var rpt = ",";
            $("#rightProcess option").each(function () {
                rpt += this.value + ",";
            });
            if (rpt != undefined && rpt != ',') {
                alert(rpt);
            }
        }

        function getParams(col, order, pnum, psize) {
            var rpt = ",";
            $("#rightProcess option").each(function () {
                rpt += this.value + ",";
            });
            var tuNgayParams = $("#txtTuNgay").val();
            var denNgayParams = $("#txtDenNgay").val();
            var groupTime = $('input[name="GroupTime"]:checked').val();
            return { LstGroup: $("#ddlGroupName").val().toString(), TrangThai: $("#trangthai").val(), TenThietBi: $("#txtTenThietBi").val(), TuNgay: tuNgayParams, DenNgay: denNgayParams, srTrangThai: $("#srTrangThai").val(), ColumnName: col, OrderBy: order, PageNumber: pnum, PageSize: $("#changePageSize").val(), HasChart: $("#chkBieuDo").is(":checked"), HasTableData: $("#chkChiTiet").is(":checked"), GroupTime: groupTime, GroupBy: $("#txtGroupBy").val(), KeyType: $("#txtKeyType").val(), BaoCao: rpt };
        }

        function exportWord() {
            $("#loading").show();
            var params = getParams(null, null, 0, 0);
            if (params.BaoCao.includes("tkslnhomthietbi")) {
                params["ChartTongThietBiNhom"] = imgThongKeNhomTB;
            }
            if (params.BaoCao.includes("thvdn")) {
                params["ChartTongSLVanDe"] = imgThongKeVanDe;
            }
            $.ajax({
                type: "POST",
                url: '/BaoCao/ExportWordDeXuatThietBi',
                data: params,
                success: function (response, status, xhr) {
                    var dt = new Date();
                    var a = document.createElement('a');
                    a.href = response;
                    a.download = 'DeXuatThietBi_' + dt.getFullYear() + "" + (dt.getMonth() + 1) + dt.getDate() + dt.getHours() + dt.getMinutes() + dt.getSeconds() +'.docx';
                    document.body.append(a);
                    a.click();
                    a.remove();
                    $("#loading").hide();
                },
                error: function (response) {
                    console.log('error - ' + response);
                    //swal("Đã có lỗi xảy ra", { icon: "error", });
                }
            });
        }

        function exportPDF() {
            $("#loading").show();
            var params = getParams(null, null, 0, 0);
            if (params.BaoCao.includes("tkslnhomthietbi")) {
                params["ChartTongThietBiNhom"] = imgThongKeNhomTB;
            } 
            if (params.BaoCao.includes("thvdn")) {
                params["ChartTongSLVanDe"] = imgThongKeVanDe;
            }
            debugger
            $.ajax({
                type: "POST",
                url: '/BaoCao/ExportPDFDeXuatThietBi',
                data: params,
                success: function (response, status, xhr) {
                    var dt = new Date();
                    var a = document.createElement('a');
                    a.href = response;
                    a.download = 'DeXuatThietBi_' + dt.getFullYear() + "" + (dt.getMonth() + 1) + dt.getDate() + dt.getHours() + dt.getMinutes() + dt.getSeconds() +'.pdf';
                    document.body.append(a);
                    a.click();
                    a.remove();
                    $("#loading").hide();
                },
                error: function (response) {
                    console.log('error - ' + response);
                    //swal("Đã có lỗi xảy ra", { icon: "error", });
                }
            });
        }
        var imgThongKeNhomTB;
        var imgThongKeVanDe;
        function loadData(isPDF) {
            $("#loading").show();
            var params = getParams(null, null, 0, 0);
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetDataChart", "BaoCao")',
                data: params,
                success: function (response) {
                    var viewModel = JSON.parse(response);
                    if (viewModel != undefined && viewModel != null) {
                        var lstGroup = viewModel.ColumnName;
                        $(".chartflag").show();
                        if (lstGroup != undefined && lstGroup != "") {
                            $("#chart1").show();
                            var chart1 = new ApexCharts(document.querySelector("#chart1"), options1);
                            chart1.render();
                            chart1.updateSeries([
                                { name: "Tổng số lượng thiết bị", data: viewModel.TongThietBi.split(',').map(Number) },
                                { name: "Thiết bị gặp vấn đề", data: viewModel.TongThietBiLoi.split(',').map(Number) }]);
                            chart1.updateOptions({
                                xaxis: {
                                    categories: lstGroup.split(',').map(String)
                                }
                            });
                            var dataURL = chart1.dataURI().then((uri) => {
                                //console.log(uri.imgURI);
                                imgThongKeNhomTB = uri.imgURI;
                                $("#chart1").hide();
                                var lstGroup1 = viewModel.LstGroup;
                                if (lstGroup1 != undefined && lstGroup1 != "") {
                                    $("#chart").show();
                                    chart.updateSeries([
                                        { name: "Chưa xử lý", data: viewModel.TongChuaXuLy.split(',').map(Number) },
                                        { name: "Đã xử lý", data: viewModel.TongDaXuLy.split(',').map(Number) }]);
                                    chart.updateOptions({
                                        xaxis: {
                                            categories: lstGroup1.split(',').map(String)
                                        }
                                    });
                                    $("#txtGroupName").val(lstGroup1);
                                    $("#txtChuaXuLy").val(viewModel.TongChuaXuLy);
                                    $("#txtDaXuLy").val(viewModel.TongDaXuLy)
                                    chart.dataURI().then((uri) => {
                                        //console.log(uri.imgURI);
                                        imgThongKeVanDe = uri.imgURI;
                                        console.log(imgThongKeVanDe);
                                        console.log(imgThongKeNhomTB);
                                        $("#chart").hide();
                                        $(".chartflag").hide();
                                        if (isPDF) {
                                            exportPDF();
                                        }
                                        else {
                                            exportWord();
                                        }
                                    });
                                }
                                else {
                                    $(".chartflag").hide();
                                }

                            });
                            //dataURL.done(function (data) {
                            //    console.log(imgUri);
                            //    chart1.destroy();
                            //})
                        }
                        else {
                            $(".chartflag").hide();
                        }
                    }
                    
                    $("#loading").hide();
                },
                error: function (response) {
                    swal("Đã có lỗi xảy ra", { icon: "error", });
                    $("#loading").hide();
                }
            });
        }
        var options1 = {
            series: [{
                name: 'Tổng số lượng thiết bị',
                type: 'column',
                data: $("#txtDaXuLy").val().split(',').map(Number)
            }, {
                name: 'Thiết bị gặp vấn đề',
                type: 'line',
                data: $("#txtChuaXuLy").val().split(',').map(Number)
            }],
            chart: {
                height: 350,
                type: 'line',
            },
            stroke: {
                width: [0, 4]
            },
            dataLabels: {
                enabled: true
            },
            labels: $("#txtGroupName").val().split(',').map(String)
        };

        //var chart1 = new ApexCharts(document.querySelector("#chart1"), options1);
        //chart1.render();

        let chart;
        var series = [
          {
              name: "Chưa xử lý",
              //data: [23, 55, 5, 88, 6, 41, 37, 22, 43, 11]
              data: $("#txtChuaXuLy").val().split(',').map(Number)
          },
          {
              name: "Đã xử lý",
              data: $("#txtDaXuLy").val().split(',').map(Number)
          }
        ];
        //const categories = ['G-ADMIN', 'G-ADTN', 'G-AV_BKAV', 'G-BITRIX', 'G-CCHC', 'G-COMMVAULT', 'G-CONG', 'TN-NETWORK', 'TN-HYPERVISOR', 'TN-SERVER'];
        var categories = $("#txtGroupName").val().split(',').map(String)
        var options = {
            series,
                colors: ['#B22222', '#32CD32'],
                chart: {
                    type: "bar",
                    height: 350,
                    stacked: true,
                    toolbar: {
                        show: false
                    },
                    events: {
                        mounted: (chartContext, config) => {
                            //console.log("mounted", chartContext, config, config.globals.yRange);
                            setTimeout(() => {
                                addAnnotations(config);
                            });
                        },
                        updated: (chartContext, config) => {
                            setTimeout(() => {
                                addAnnotations(config);
                            });
                        }
                    }
                },
            dataLabels: {
                enabled: true
            },
            plotOptions: {
                bar: {
                    columnWidth: '30%',
                    horizontal: false,
                    dataLabels: {
                        maxItems: 2
                    }
                }
            },
            xaxis: {
                categories,
                    axisTicks: {
                    show: true
                    },
                axisBorder: {
                    show: true
                },
                // floating: true,
                labels: {
                    // maxHeight: 0,
                    hideOverlappingLabels: false,
                }
            },
            yaxis: {
                axisTicks: {
                    show: true
                },
                axisBorder: {
                    show: true
                },
                labels: {
                    hideOverlappingLabels: true,
                }
            },
            fill: {
                opacity: 1
            },
            legend: {
                position: "right",
                horizontalAlign: "left"
            },
            grid: {
                padding: {
                    left: 13.5,
                    right: 0
                },
                xaxis: {
                    lines: {
                        show: true
                    }
                },
            }
        };
        var addAnnotations = (config) => {
            const seriesTotals = config.globals.stackedSeriesTotals;
            const isHorizontal = options.plotOptions.bar.horizontal;
            chart.clearAnnotations();
            var lstgroup = $("#txtGroupName").val().split(',').map(String);
            try {
                lstgroup.forEach((category, index) => {
                    chart.addPointAnnotation(
                      {
                          y: isHorizontal
                            ? calcHorizontalY(config, index)
                            : seriesTotals[index],
                          x: isHorizontal ? 0 : category,
                          label: {
                              text: `${seriesTotals[index]}`
                          }
                      },
                      false
                    );

                    if (isHorizontal) {
                        adjustPointAnnotationXCoord(config, index);
                    }
                });
            } catch (error) {
                console.log(`Add point annotation error: ${error.message}`);
            }
        };

        var calcHorizontalY = (config, index) => {
            const catLength = categories.length;
            const yRange = config.globals.yRange[0];
            const minY = config.globals.minY;
            const halfBarHeight = yRange / catLength / 2;

            return minY + halfBarHeight + 2 * halfBarHeight * (catLength - 1 - index);
        };

        var adjustPointAnnotationXCoord = (config, index) => {
            const gridWidth = config.globals.gridWidth;
            const seriesTotal = config.globals.stackedSeriesTotals[index];
            const minY = config.globals.minY;
            const yRange = config.globals.yRange[0];
            const xOffset = (gridWidth * (seriesTotal + Math.abs(minY))) / yRange;
            const circle = document.querySelector(
              `.apexcharts-point-annotations circle:nth-of-type(${index + 1})`
            );
            const labelField = document.querySelector(
              `.apexcharts-point-annotations rect:nth-of-type(${index + 1}`
            );
            const labelFieldXCoord = parseFloat(labelField.getAttribute("x"));
            const text = document.querySelector(
              `.apexcharts-point-annotations text:nth-of-type(${index + 1}`
            );

            labelField.setAttribute("x", labelFieldXCoord + xOffset);
            text.setAttribute("x", xOffset);
            console.log(labelFieldXCoord);
            circle.setAttribute("cx", xOffset);
        };

        chart = new ApexCharts(document.querySelector("#chart"), options);
        chart.render();
    </script>
}
